apiVersion: v1
data:
  prometheus-additional.yaml: 
- job_name: 'CACTI	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r02-10.0.0.220 stz	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r15-10.0.0.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r16-10.0.0.237	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r111-10.0.0.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TEST-ZIT-RTR	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r25-10.0.0.249	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Velingrad r05-10.0.0.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r28-10.0.0.252 Bolyarovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r35-10.0.0.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rakovski r41-10.0.0.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'RTR Rsync & Graphs Collector	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.16
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r47-10.0.0.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r48-0.200 Marchaevo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Juniper-EX3200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r181 10.0.0.46 Nadejda 305	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns-cache 1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic-Sofia-Rtr-179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns-cache2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r64-10.0.0.173	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Backup	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns3.bulsat.com	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns4.bulsat.com	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin-net-cisco-3750	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.42
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Velingrad r59-10.0.0.178 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r60-10.0.0.177	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.177
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r68-10.0.0.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r69-10.0.0.167	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nadejda-bl305 em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost4-bl443-sw1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Iztok-bl28-sw1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby-Pordim 16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.20
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r75-10.0.0.160	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'katunica-r78-0.157	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.157
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r79-10.0.0.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r81-10.0.0.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r82-10.0.0.153	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.153
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r83-10.0.0.152	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r84-10.0.0.151	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r87-10.0.0.148	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r88-10.0.0.147	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.147
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic-Stz-10.0.0.145	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.145
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r96-10.0.0.138	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r93-10.0.0.142	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r90-10.0.0.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r73-10.0.0.163	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dulovo-sw-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.183
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r99-10.0.0.135	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.135
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r70-10.0.0.166	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Reduta-r104-0.129	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r92-Dospat	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r105-10.0.0.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kiuchuka-16.44	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Trakia-137-em1-sw-16.45	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.45
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns-cache4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns-cache3	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.17
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r108-SunnyBeach	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Valchidol-0.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r115-10.0.0.118 Dobrich rezerva	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r117-10.0.0.117	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.117
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby-Provadia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'tutrakan-em1-8.180	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'harmanly-em1-8.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'orlovmost-em1-32.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'orlovmost-em1-32.190	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.190
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Velingrad r128-10.0.0.105	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shivachevo-r113-10.0.0.120	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cure Server	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.14
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 10 check power supply nod	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'V.Tarnovo r132-10.0.0.101	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic Yambol	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cacti Server	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 46.40.72.8
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic Pazardjik	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic Dobrich	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lookup Database	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bulsat MSPA	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic Lulin	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.134
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'VPN Optichen	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Undola-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'General Toshevo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: '10G-Pazardjik	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.90
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'development 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nova Zagora 10G	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna-10G-1.222	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'St.Zagora	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.89
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'katunica-0.77	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.77
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruse-rtr125-10.0.8.108	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.108
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Karshiaka-16.58	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Karshiaka-16.59	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'stz-10Grtr-10.0.0.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin juniper ex-3300	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.40
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'IPMI New Server Room	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: '6.04-1108 gpon-suha-reka	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon-Ruski30	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'gpon-bankia-3.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.02-2527 gpon-1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon-mladost 364	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon-Idis	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon-Tri-chuchura	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gpon Zapad	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik gpon-3.214	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.214
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon-CSV160	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dimitrovgrad 6.04-1108 gpon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: '6.04-1108 gpon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lookup VladY	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.33
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Logger	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kazanlak jun ex4550	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sarnica Router 250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sevlievo r147-10.0.0.83	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.83
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Suha Reka power test nod	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'G.Milev-mxge-0.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv EM1 PISCO	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stz-r152-10G-10.0.0.78	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nova Zagora ix0 8.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Radnevo-ix0 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'rtr149-10.0.0.81	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pdns-cache-10.0.0.19	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.19
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'rtr-151-79	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.79
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'stz-min-bani-10G-r164-mxge-0.65	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.65
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Targovishte-r154-10.0.0.76	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'haskovo-10G-rtr165	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'r228-mxge-1-216	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Burgas-ix0-8.137	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.137
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-3-servers-cdn	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.40
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Provadia juniper 4550 ix0 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON data and log Collector	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dimitrovgrad jun ex4550	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optic-Plovdiv-10.0.0.63	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.63
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Svilengrad r145-85	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.85
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns-cache6-tinycore	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.25
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ignatievo-em0-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sredec-mxge-r168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'kozloduy em1 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.66
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost3-bl341-GPON-7.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kozloduy em1 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kozloduy em1 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sarnica em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hipodruma 114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lagera 52 - vinket em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Darvenica bl.9 em0 gsm	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.99
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Netspot	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Marchaevo em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.219
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Marchaevo em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'BIX Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 193.169.198.10
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Megalan	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 89.190.201.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Neterra Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 46.40.73.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Novatel Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 95.158.130.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Comnet Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 46.40.73.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Telehose(Networx) Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 178.132.83.57
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Google Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 72.14.243.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vivacom Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 83.228.97.89
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Microsoft Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 193.169.198.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vestitel Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 87.247.250.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN Servers MGMT	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rechica ix0-8.91	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.91
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rechica IX1-8.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON Poligona	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost HIT	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Suha Reka em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shabla em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Burgas em1-8.140	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Devnia ix0-8.217	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shumen ix0-9.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'varna-em1-8.190(cons-rtr213)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.190
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Haskovo 10G em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.93
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Burgas ix1-8.152	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tervel em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ivaylovgrad em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'new office	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Veliko Tarnovo em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.187
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv Gpon Managament -sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Planet Fondovi bl.204 ix0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.96
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin bl.516 em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 815 em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.89
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Iztok-r.a-28-emo-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Drujba bl.92 em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Drujba-bl310-ix0-GSM-32.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zapaden Park bl.139	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ovcha Kupel bl.507	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.157
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hadji Dimitar 113 em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.98
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zona-b19	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'strelbishte-em0-32.74	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Fondovi-bl.204-ix1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasna Poliana 1 bl.20	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.130
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Serdika-bl.15A	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost-bl.238-GSM-em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zona B5 Todorovski	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Serdika-bl.15A-sw2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.153
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Slatina bl.18 em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.85
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika Garaj	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.131
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika bl.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika bl.24	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.133
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika-bl20A	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.135
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika bl.20A	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.136
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'K.Polqna2-bl245	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika bl.12	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.134
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nadejda bl.305 em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Niproruda	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ZonaB5-tservice-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasna Poliana 3 bl.337	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.114
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Drijba-bl.69-em0-GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'nadejda-bl.305 em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 232 em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.67
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zona B5 bl.7 kasa	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.159
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'mladost-bl527-em0-GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zona B18	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ZonaB5-bl.26	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost bl.364 em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasna Poliana bl.36	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.141
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'St.Karadja-bl143-em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.50
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.42
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.65
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.26
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stroevo-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Trud em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv Brezovsko-Shose	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON Drujba 310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GPON Drujba 69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kazanlak-gpon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kananluk-gpon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GPON Mladost 1B	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pleven-ix0-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sevlievo-em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON H.Dimitar	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Varna-Gpon3.196	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad-gpon-3.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bulgarovo-em0-8.88	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bulgarovo-0.74	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Burgas-Gpon-3.190	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.190
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Burgas-gpon-3.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stara-zagora-gpon-3.194	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stara-zagora-gpon-3.206	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stara-zagora-gpon-3.192	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GPON Mladost 527 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kazanlak-mxge-rtr-0.62	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kazanlak-gpon-3.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Serdika-bl.18	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasna Poliana 3 bl.333	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.117
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-gpon-3.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-gpon-3.184	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Zona B5 bl.7	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.107
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-em1-16.46	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razsadnika bl.77	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.121
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'asenovgrad-gpon-3.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dobrich-gpon-3.198	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Beloslav-rtr-0.97	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Valchidol-rtr-0.71	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.71
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'rtr161 Topolovgrad	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Svilgrd i Ivailovgrd em0 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krumovo em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Graf Ignateivo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GrafIgnatievo-em0-8.136	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.136
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf Republika/Pushkarov 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Za Obelya  (lunlin 915)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hit - Bulsat Office	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.30
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 290 EC2410 port 8	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optika F1 Filipovci	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optica 103 OU uplink port10	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.31
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 8 i 9 nov EC2924	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin bl.986	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TP-Link Dude Switch	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.19
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Office 9 2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.8
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optika Techno Lux ui.328	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Switch ul. 328 10 EC2126 4070	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.17
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ul. Turnovo 46  EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Zaichar 102	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.23
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Garata	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.24
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TP-Link Banishora bl.41a	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.25
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Sv.Troica bl.377	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.29
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Botev 136 (Klokotnica)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.33
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Pirotska 52	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TP-Link Stranja 92	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PicoIP_GB Odrin 146 - sw'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PicoIP_GB Veslec 40 - sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TP-Link1 Pordim 16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankq Planet GSD-1020S Serverno 915	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.29
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Toleva mahala  EC2410	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.17
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf Evropa 176 EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankq	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia Power Supply	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.21
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf Krugovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'shkaf Rudozem	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 1 NOV	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.106.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 014 2  FGS2824	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.106.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl.014 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.106.31
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 006 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.106.25
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 033	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.106.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Office 7 FGS2924R	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.47
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl.715 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl.715 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl 703 ES2310C	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 706 EC2310 vh. B	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blok 727	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 624 EC2924	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 608 EC2410	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 601 EC2410	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.11
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl.624	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 627 EC2410	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pernik em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf 23 dek. Volktek	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Optika Puci ES2310-C MESTI SE NA PON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.42
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 326 EC2310 shkaf	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 319	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.34
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 318 EC2310 vh. G shkaf g	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Modernoto EC2924R	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 4000  EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 8000	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 5000	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.14
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Keckarov 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Baba i Rostov 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf Vruh Mancho	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.10
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Office modernoto	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.8
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 9000 EC2310 Za Demontirane	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'D-link Lulin 3	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 350 Rubby FGS-2924R2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.36
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 344	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Volktek 350 100mps ONLY	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 303  EDGECORE	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.30
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ul. Ar. Georgi Nenov i Krasko	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.28
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 387 Ec2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.27
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 789 EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.24
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 765	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.108.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin-bl145 - mxge	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON Lulin bl.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lulin  bl.815  Serverno  za Lulin 4 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.111.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin Cure	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blok 426 Ofis 4  Lulin 5	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.11.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 1001  EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ul. 732  EC2310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.17
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shkaf Alfa Romeo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.107.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kardzali ix0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bl. 325	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.102.30
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'plovdiv-gpon-3.142	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Svoboda 153 SOU em0 GSM	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pernik RTR	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin bl.516 Gpon-3.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dulovo-em0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Carna Maca em1-32.61	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Laki em0-8.71	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.71
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Laki-0.106	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Chirpan 10G-0.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pazardjik-mxge-10.0.1.217	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna gpon-3.140	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ovcha Kupel 507 ix0-GSM-32.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Elhovo 10G-0.58	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'topolovgrad-em0-8.179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna GPON  vlan3603	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Optic Kazanlak	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.56
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kazanlak 10G ix1 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.57
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Harmanly ix0-8.165	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.165
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Suha Reka Juniper ix0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.49
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Suha Reka 10G	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruby Suha Reka ix1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lubimec mxge 10G-0.53	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'strelbishte gpon-3.164	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.164
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'st. karadja gpon-3.162	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lulin bl.430 em0 gsm	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin bl.430 gpon-3.160	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Arista Plovdiv ix1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nadejda-gpon-3.166	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'asenovgrad 10G-0.52	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'varna 10G-1.223	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'varna arista ix1-8.97	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ruse em0-8.62	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Reduta em0-32.58	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Reduta em1-32.90	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.90
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rechica 10G-0.50	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.50
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Galabovo-ix0-8.61	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Galabovo-ix1-8.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Galabovo-10G-0.49	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.49
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'mladost bl.238 gpon-7.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lulin 145 arista ix0-8.233	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kustendil em0-8.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kustendil 0.124	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven LTE Mobile	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'asenovgrad ix1-8.64	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Byala 10G-0.48	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.48
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven em1-8.94	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gpon Zaichar-3.124	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Banishora gpon-3.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Botevgrad-em0-8.59	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Montana-em0-8.227	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'SunnyBeach-em0-8.158	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nadejda-bl305 ix1-32.53	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'panagurishte mxge2 10.0.0.43 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia mxge r182 0.44	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Fondovi mxge 10.0.0.41	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ivan Vazov 72 gsm em0-32.54	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod Geo Milev 255	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply Fondovi bl.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 305	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 815	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.241
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 430	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 516	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod  41A	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 9	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 1b	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 527	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 310	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Check power supply nod 92	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Powernet mxge r184 0.42	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.42
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost 1B em0-32.51	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Banishora 69 gpon-3.106	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Netspot DB	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Drujba bl310 mxge r234-1.210	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'radnevo-gpon-3.82	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera mxge 0.36	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.36
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Drujba-bl310-ix1-32.104	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.104
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dianabat gpon-3.174	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.174
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Slatina-bl.18 gpon-3.132	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'st.zagora_10G-1-253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'devnia mxge-r190-1.254	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'yambol mxge-r229-1.215	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pazardjik gpon-3.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ME - DES-3010G-BSP-Pozitano	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ovcha Kupel 507 ix1-32.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ul. 3-ti Mart 16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.105.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ovcha Kupel 507 em1-32.45	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.45
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME - DES-3526 - Nadejda3'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.77
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - DES-3010G - Nadejda 3'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cisco3750 Nadejda bl.241	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME - DES-3028 - 15-to_ODZ	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME - Bunkera Okov	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI-Alabin'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.93
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME-Svoboda 153-to uchilishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.115
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Simeonovo Momina Salza 12	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Studentski Grad bl9'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME-137-mo ODZ	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI-Nadejda 2(bl-241)'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI-Nadejda 4'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.127
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO--171-va Detska Gradina	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.126
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - 6-to ODZ 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.137
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME-Nadejda1_Obshtina	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.123
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: '(ME-Tolstoy kasa)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI - Lulin 3'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.72
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bojurishte'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.50
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'S.Prolesha-tavansko-PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.57
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Maksim_Gorki-PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.91
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'DES-3010G - Bukston-bl.31B 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'DES-3010G - Bukston_bl.4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.177
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI - DGS-3100-24 - kasa Boyana	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'DGS-3200-10 - Stela_Boyana 10	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI - DGS-3100-24 - boyana tablo pri Lucho	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - DES - 3010G - marinkovica 2B	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.56
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TL-SL5428E - BBrezi'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.100
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - DES-3200-10 - Bul.Bukston_N_70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN Huawei  Bukston'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - TP-link 3109 - ul.Mur-1a	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.175
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN_Old_office_OK_Rachka	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME - Huawei Quidway S2016 - Turgovsko bankova gimnazia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.161
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME - 127-mo uchilishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.149
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Biblioteka pl.Slaveikov	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.155
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - PGME (stara planina10)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.83
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - SMG	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - shishman_7-mo-uchilishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'HI - Oborishte'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Oborishte 112-COY	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME -  Oborishte ul.Krakra 28	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ME -  Rezbarska_31	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - lozenec_35SOU	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.63
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - Persenk 19A	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - Lozenec ABV	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.143
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Market-test	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Hristo Belchev no.2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.165
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - 20-Uchilishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.164
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Knqz Boris I -24 (maze Drago)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.47
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pleven-ix1-8.153	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.153
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia GPON 3.94	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'plovdiv gpon-3.98	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.98
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stara-zagora-gpon-3.100	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.100
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'plovdiv gpon-3.102	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'LO - Biznes_centur-3_ushi	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Serdika'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.139
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ZonaB5 bl.15 PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'T.Aleksandrov 137 PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ROHDE_SCHWARZ	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'LO - Odrin_95	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - ul.DamqnGruev 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.169
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ivan Rilski Office PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - Kukush_1_intesa	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.147
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN - Kukush 1 (Zagato)	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stamboliyski mxge-r193 10G 1.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vrania 32 Planet	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasno Selo em1-32.92	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.92
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'mxge Dianabad 1.250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dianabad Planet ix0 gsm	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dianabad Planet ix1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'asenovgrad gpon-3.176	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.176
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pesenk 27	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sadovo ix0-8.96	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.96
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia GPON 3.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pdns-cache-26	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.26
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Banishora 69 GPON-3.110	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stz 1.249 10G	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna 10G 1.248 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dobrich Arista ix1-8.98	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.98
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lubimec-ix0-8.110	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zaichar ix1-8.111	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'V.Tarnovo 10G-1.247	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-4-clients-cdn	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.20
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Mladost3-bl341-em0-32.243	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Power Supply Slatina	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'dnsdist1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.21
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zapaden Park bl55	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.145
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vidin-em0-8.132	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Banishora-69-em1-1.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Banishora-69-em1-1.82	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Straldja em0 8.133	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.133
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Beloslav ix0-8.130	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.130
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Beloslav ix1-8.131	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.131
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv mxge-r198 10G 1.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik mxge-r199 1.245	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik mxge-r200 1.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gabrovo-mxge-rtr201-10.0.1.243 X11	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-mxge-rtr202-10.0.1.242 X11	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'gabrovo-ix1-sw-8.114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.114
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON Septemvri-6.254	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia-ix0-8.112	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.112
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia-ix1-8.200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gelemenovo epon-6.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stamboliyski EPON-4.105	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kostievo-EPON-6.241	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.241
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radinovo EPON-6.242	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON Katunica	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo-mxge-rtr204-1.240	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna-mxge-rtr203-1.241	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.241
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kocherinovo-EPON-6.239	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gabrovo EPON-6.23	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.23
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gabrovo EPON-6.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sheinovo-EPON-6.229	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gen.Toshevo EPON-6.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ardino EPON-6.188	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.188
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ardino-EPON-6.189	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.189
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stz-minbani-EPON-6.219	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.219
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'trud-EPON-6.245	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'trud-EPON-6.249	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'zagore-EPON-6.220	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Laki EPON-6.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo IX1-8.55	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Aksakovo EPON-6.197	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Cherganovo EPON-6.230	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Priselci-EPON-6.217	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kardzali EPON-6.191	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kardzali EPON-6.192	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'smolyan-epon 6.190	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.190
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krichim-em1-8.54	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krichim-EPON-6.166	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bolyarci EPON-6.183	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.183
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON Suvorovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.137
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Valchi dol EPON-6.215	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topoli EPON-6.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Beloslav EPON-6.207	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vetrino EPON-6.216	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala EPON-6.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shabla EPON-6.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shabla EPON-6.210	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Idis-EPON-6.206	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dalgopol EPON-6.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Tervel EPON-6.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topolovgrad EPON-6.195	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.195
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topolovgrad EPON-6.172	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'STZ gpon-3.150	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.150
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo EPON-6.159	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.159
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'gabrovo-EPON-6.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kableshkovo EPON-6.224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kableshkovo EPON-6.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kableshkovo EPON-6.228	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Panagiurishte EPON-6.250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hisarya EPON-6.247	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Parvomay EPON-6.187	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.187
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Popovica EPON-4.107	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.107
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Milevo EPON-6.173	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sungurlare EPON-6.223	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gen. Toshevo-EPON-6.211	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.211
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-EPON-6.199	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.199
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-EPON-6.198	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bulgarovo EPON-6.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kardzali EPON-6.175	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.175
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kardzali EPON-6.176	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.176
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik epon-6.164	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.164
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elenino EPON-6.158	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gen.Toshevo EPON-6.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Obzor-EPON-6.200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'NovaZagora-EPON-6.79	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.79
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'NovaZagora-EPON-6.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'NovaZagora-EPON-6.81	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'NovaZagora-EPON-6.82	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'NovaZagora-EPON-6.83	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.83
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razlog EPON-6.155	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.155
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON Septemvri-6.163	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'smolyan-epon6.181	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.181
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'smolyan-epon-6.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kolena-EPON-6.160	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo EPON-6.120	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yagoda-EPON-6.89	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.89
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yagoda-EPON-6.90	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.90
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo EPON-6.114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.114
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo-EPON-6.115	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.115
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo-EPON-6.117	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.117
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo-EPON-.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia EPON-6.151	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Idis-6.152	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-6.61	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-6.62	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-6.222	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'septemvri EPON 6.161	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.161
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'septemvri EPON 6.162	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo-EPON-6.194	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo-EPON-6.177	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.177
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krichim-EPON-6.169	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.169
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Madjerito-6.93	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.93
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Seltci EPON-6.184	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera EPON-6.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera EPON-6.59	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.123	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.123
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.85	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.85
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo-EPON-6.119	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.119
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stambolovo EPON-6.180	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Aksakovo EPON-6.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo EPON-6.149	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.149
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo EPON-6.150	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.150
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo EPON-6.153	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.153
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo EPON-6.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo-EPON-6.98	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.98
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo-ix1-8.109	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.109
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'zetyovo EPON-6.75	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pavel bania EPON-6.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Cherganovo EPON-6.125	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Hrishteni-6.97	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sredec EPON-6.95	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kozloduy EPON-6.146	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kozloduy EPON-6.147	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.147
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pleven-EPON-6.84	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pleven-EPON-6.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.87
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hisarya EPON-6.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dulovo-EPON-6.129	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Beloslav-EPON-6.139	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.139
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Beloslav-EPON-6.143	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.143
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Suvorovo EPON-6.134	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.134
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Radnevo-6.140	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Aksakovo EPON-6.142	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Smolyan-EPON-6.104	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.104
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.110	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.111	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Merichleri EPON-6.108	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.108
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bolyarovo em0-8.224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bolyarovo em1-8.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shipka-EPON-6.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.105	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.107	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.107
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.56	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.56
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stz mxge 1.239 10G	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Straldja EPON-6.65	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.65
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stara sagora ix1-9.192	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shanovo EPON-6.92	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.92
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Valchi dol EPON-6.135	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.135
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dospat-EPON-6.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dobrich-EPON-6.132	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dobrich-EPON-6.133	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.133
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dospat em0-8.108	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.108
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'simeonovgrad EPON-6.141	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.141
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'simeonovgrad EPON-4.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'stz mxge 1.238 10G	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'mxge lulin bl.145	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven EPON-6.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven EPON-6.227	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven EPON-6.63	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.63
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.109	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.109
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.112	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.112
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-obruchiste-6.58	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dimitrovgrad-mxge-rtr208-1.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'shumen EPON-6.70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bachkovo EPON-6.76	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Suvorovo EPON-6.138	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Svoboda 153SOU em1-32.69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dobrich-EPON-6.130	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.130
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'brestnik em1-8.242	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'brestnik-EPON-6.165	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.165
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'brestnik-EPON-6.171	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Straldja EPON-6.66	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.66
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bezmer EPON-6.64	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Paskalevo EPON-6.136	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.136
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.57	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.57
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo EPON-6.55	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kozloduy em0-8.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Valchidol 0.113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kostievo-EPON-4.64	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sarnica EPON-6.148	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Straldja EPON-6.67	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.67
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Asenovgrad-10.0.1.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gen. Toshevo-EPON-6.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Selo-Spasovo-EPON-6.78	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dimitrovgrad-gpon-3.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'razlog mxge2-rtr210-1.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kabile-EPON-6.118	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shumen-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dibich EPON-6.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.238	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dylboki EPON-6.106	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ARISTON 1 3508	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.34
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ARISTON 2 3508	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.33
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bolyarovo EPON-6.68	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernogorovo EPON-6.252	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernogorovo EPON-6.253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kaloianovec EPON-6.145	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.145
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'shumen EPON-6.69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-ix1-8.107	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.107
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'STZ Arista IX0-8.101	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'SunnyBeach EPON-5.242	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.46	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.40	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.40
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razgrad-epon-6.72	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.72
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razgrad-epon-6.73	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.73
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Zit-Mladost-1.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Burgas-em1-8.189	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.189
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Burgas	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.241
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Burgas	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ivailovgrad-EPON-6.178	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-S.brqst	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-S.brot-5.165	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.165
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Beloslav	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.214
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lubimec EPON-6.193	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Senokos EPON-4.70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Xaskovo mxge2 rtr213-1.231	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: '10G-Kazanlak	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pavel bania EPON-5.253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Arista-Haskovo-100G-ix0-9.174	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.174
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Trud-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Smolyan-EPON-6.31	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.31
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera-ix0-8.113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Elhovo ix0-8.105	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'TP-LINK-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Radinovo-em1-8.129	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dimitrovgrad-ix1-8.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Brestnik epon 5.117	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.117
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Trud-Epon-6.11 NO-MGMT	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.11
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Opan EPON-6.157	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.157
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Katunica 0.84	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 715 GPON-3.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol ix1-8.206	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'devnia ix1-8.237	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'provadia ix1-8.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pavel bania ix0-8.238	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tutrakan EPON-5.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-Epon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.34
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-EPON-6.53	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Aksakovo EPON-6.33	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.33
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stamboliyski-epon-6.44	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven ix1-8.216	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'yambol-EPON-5.207	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.210	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.211	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.211
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.240	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-6.12	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.12
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-6.38	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.38
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-4.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.47	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.47
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sadovo EPON-6.77	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.77
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.45	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.45
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.43	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.41	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.37	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.37
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.42	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.42
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.217	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.220	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.219	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.219
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'alfatar EPON-5.215	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera EPON-5.243	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-6.52	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-5.224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-mxge-rtr214-10.0.1.230	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'yambol-EPON-6.3	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-75.223	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-5.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-5.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Burgas-Lazur-em1-8.121	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.121
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Burgas-lazur-6.22	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Burgas-lazur-5.222	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo EPON-5.237	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad 10G-1.229	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sinitevo epon-5.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sinitevo epon-5.245	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gabrovo EPON-6.6	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.6
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.30	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.30
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan ix0-8.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lubimec EPON-6.29	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.29
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol EPON-6.2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-EPON-5.227	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Oborishte-EPON-5.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Aksakovo EPON-5.228	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan EPON-6.54	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan EPON-6.25	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.25
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan EPON-6.26	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.26
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan EPON-6.27	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.27
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol EPON-5.231	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-6.9	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-6.47	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.48
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.5	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-6.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Burgas-lazur-6.4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chirpan ix1-8.102	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Radnevo ix1-8.53	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hristianovo-EPON-6.74	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'em1 OK 507 32.197	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Radnevo EPON-6.19	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.19
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo EPON-6.113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo EPON-6.21	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.21
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Aksakovo EPON-6.102	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Geo Milev ix0-32.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Geo Milev ix1-32.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.87
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Harmanly EPON-6.36	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.36
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radnevo EPON-6.18	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pavel bania Epon-6.20	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.20
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kocherinovo s.Stob EPON-6.51	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gen. Toshevo-ix0-8.253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rakovski-em0-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rakovski-em1-sw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rakovski EPON-6.101	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-5.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'shumen EPON-5.233	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven EPON-5.171	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Tervel EPON-5.216	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dinkata EPON-5.247	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'razgrad EPON-6.14	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.14
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harmanly EPON-6.49	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.49
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kazanlak EPON-5.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Panagiurishte EPON-6.50	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.50
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'AlekoKonstantinovo-EPON-6.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'AlekoKonstantinovo-EPON-6.243	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pleven Epon-6.88	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'malkogradishte-epon-6.13	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'katunica-EPON-6.99	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.99
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Dobrich	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'General Toshevo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'dolni-chiflik-EPON-5.229	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dido-Mikrotik-8.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'provadia EPON-5.133	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.133
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad EPON-6.24	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.24
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia-EPON-5.134	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.134
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Valchi Dol-EPON-5.135	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.135
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.136	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.136
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.187	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.187
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.188	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.188
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.189	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.189
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.190	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.190
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'devnia-EPON-5.191	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Tervel-epon-5.155	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.155
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Tervel-epon-5.156	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.156
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gen.Toshevo-epon-5.153	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.153
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'G.Toshevo-epon-5.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Idis-EPON-5.115	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.115
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Priselci-EPON-5.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dulovo-EPON-5.152	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Simeonovgrad EPON-5.195	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.195
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia EPON-5.132	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Strashimirovo-EPON-5.112	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.112
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Strashimirovo-EPON-5.113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ezerovo-EPON-5.114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.114
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lubimec EPON-5.196	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shivachevo-EPON-5.238	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Parvomay EPON-6.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Parvomay EPON-4.162 skobelevo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Oryahovica-EPON-5.249	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Burgas-meden-rudnik-em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.73
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Meden-rudnik-EPON-5.183	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.183
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Meden-rudnik-EPON-5.179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Meden-rudnik-EPON-5.180	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.194	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.123	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.123
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.125	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.126	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.126
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Voluyak Gara 113.18	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.113.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Voluyak - Malina i Serdika 113.19	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.113.19
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Divdiadovo1 EPON-6.15	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Divdiadovo2 EPON-6.16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.16
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'burgas-EPON-5.177	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.177
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'burgas-EPON-5.178	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo-ix0-8.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Epon-TIS	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shivachevo-EPON-5.197	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topolvgrad em0-8.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kozloduy em0-8.239	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Yagodovo-epon	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.100
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yagodovo-epon2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Veselinovo em1-8.193	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blagoevgrad EPON-5.230	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON Br.Kunchevi	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Socialno_podpomagane PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Karnobat-em0-8.135	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.135
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Valchidol-ix0-8.169	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.169
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Epon-Bakalov	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'IvanVazov em1-32.79	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.79
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Karamanci EPON-5.141	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.141
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sadovo-EPON-5.193	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'smolyan EPON-5.137	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.137
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodrima 114 ix0-32.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Peshtera EPON-5.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dolni Voden EPON-5.174	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.174
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'PWN-Stopanska-Kamera	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Suvorovo ix1-8.139	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.139
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krumovo EPON-5.105	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.105
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krumovo EPON-5.106	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Katunishte-EPON-5.97	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razgrad-mxge-1.228	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 's.Mogila-EPON-5.96	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.96
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'razgrad-ix0-9.172	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'razgrad-ix1-8.141	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.141
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Glavinica-EPON-5.98	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.98
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Glavinica-EPON-5.99	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.99
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala EPON-5.147	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.147
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EponTopoli-5.176	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.176
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Beloslav-EPON-5.148	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Devnia-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.149
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Devnia-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.150
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'trud EPON-5.118	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.111	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GrafIgnatievo-em1-8.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Epon-Sliven	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Provadia-EPON-5.175	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.175
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Valchi_dol_EPON-5.173	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven EPON-5.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krun-EPON-5.172	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krun-EPON-5.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krun-EPON-5.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Harnamli Planet ix1-8.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Serv2-Rack7-ipmi-sw-8.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'harmanly-EPON-5.158	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krasna Poliana 2 bl.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'panagurishte-ix0-8.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'panagurishte-ix1-8.248	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik ix1 8.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Obruchishte-EPON-4.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pz-1-1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stamboliyski EPON-5.119	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.119
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stamboliyski EPON-5.160	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bogomilovo-EPON-5.40	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.40
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.139	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.139
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mall-Gabrovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven TIS  EPON-5.28	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.28
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-4.152	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.152
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'asenovgrad em0-8.174	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.174
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'asenovgrad jun ix0-8.167	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'asenovgrad 10.0.1.227	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ivailo EPON-5.11	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.11
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ivailo EPON-5.110	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik EPON-5.38	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.38
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik EPON-5.37	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.37
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Veselinovo EPON-5.254	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Cenovo-EPON-5.109	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.109
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad-EPON-5.88	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vasko-LAB	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Arista-sf-zit-100G-ix0-9.169	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.169
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sofia Arista ix1 8.163	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sofia Planet 10G IX0-8.162	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Zona B5 bl.14	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik EPON-5.39	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.39
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.9	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.9
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Skutare-em1-16.70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sofia Planet ix1 8.176	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.176
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hipodruma 114 ix1-32.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Pz-1-5	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.20
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Pz-1-6	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.21
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Niki Room-8.150 Power	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.150
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shumen 10G 1.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shumen IX1 8.57	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.57
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dalgopol EPON-5.151	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Provadia em0-8.39	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.39
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Galabovo-EPON-5.107	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.107
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.138	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Stamboliyski-ix0-8.123	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.123
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stamboliyski-ix1-8.124	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'DUDE-LULIN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 46.40.73.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nova Zagora ix1 8.125	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kocherinovo-EPON-5.72	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.72
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernevo-EPON-5.16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.16
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernevo-EPON-5.79	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.79
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bolyarci EPON-5.71	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.71
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kochevo EPON-5.69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera-EPON-5.41	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.41
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'herakovo_kmetstvo_PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.119
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Provadia-EPON-5.64	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.64
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-5.81	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Katunica ix0-8.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Katunica em1-8.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nova Nadejda EPON-5.75	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Badelema EPON-5.67	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.67
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'bolyarci ix0-8.74	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vetrino-EPON-5.65	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.65
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Gabrovo EPON-6.124	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Skutare-5.27	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.27
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Skutare-5.74	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.74
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik EPON-5.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-5.55	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.55
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-5.54	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Haskovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik pz-1-8 EPON-5.18	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.18
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik pz-1-9 EPON-5.53	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.53
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Smolyan-EPON-5.78	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radievo EPON-5.45	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.45
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mineralni Bani-EPON-5.77	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.77
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-ix1-8.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Provadia-mxge-rtr223-1.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sadovo-mxge-r176-0.51	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sadovo-ix1-8.155	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.155
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Backup	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Niki-fl	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.99
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Topolchane EPON-4.231	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-mxge-1.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-mxge-1-224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dobrich EPON-5.34	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.34
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dobrich ix1-8.134	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.134
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dobrich EPON-5.35	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.35
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Svilengrad GPON-5.51	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.51
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'zaichar-em1-32.48	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.48
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Katunica EPON-5.161	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.161
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ivailo EPON-5.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik EPON-5.17	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.17
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik EPON-5.22	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik EPON-5.24	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.24
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'T.Vlaikov i Svoge	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna-Idis-ix1-8.127	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.127
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-3 slave	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.45
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.28
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'bolyarci EPON-5.70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'jun-mx960-5	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.11
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-6 Intl	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.12
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'jun-mx960-6	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dnsdist2-72.27	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.22
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'razgrad EPON-5.43	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.43
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala EPON-4.75	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera ix1-8.126	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.126
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Merichleri EPON-5.32	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Elhovo ix1-9.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven 10G-1.219	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.219
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven 10G-1.220	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bogdanica EPON-5.68	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ekzarh Josif 2 -32.80	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.80
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pavlovo-em1-32.66	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.66
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'PWN-132 uchilishte - Slavia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Benkovski-em1-16.54	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.54
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'dolni-chiflik-EPON-5.12	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.12
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dolni-chiflik-EPON-5.66	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.66
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia em1-103.75	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.103.75
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bankia EPON-5.82	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia-EPON-4.96	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.96
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Varna-Idis-EPON-5.14	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.14
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Varna-Idis-EPON-5.15	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'reduta-EPON-4.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma 114 EPON-5.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'dimitrovgrad EPON-5.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shumen EPON-5.59	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma 114 EPON-5.85	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.85
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.47	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.47
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'reduta-EPON-5.131	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.131
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia EPON-5.130	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.130
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Simeonovgrad IX0-8.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rechica EPON-5.30	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.30
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Rechica EPON-5.44	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kustendil-EPON-5.6	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.6
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'zaichar-ix1-32.138	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik-EPON-5.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'jun-mx960-5 Peering	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.10
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: '????	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tutrakan em0-8.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tutrakan em1-8.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Chirpan EPON-4.247	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sredec EPON-5.181	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.181
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'reduta-EPON-5.61	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma 114 EPON-4.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Zlatovrah EPON-5.58	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sliven-EPON-5.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv em1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stroevo-EPON-5.46	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.46
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razgrad EPON-5.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik-EPON-4.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik-EPON-4.222	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.222
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik-EPON-4.243	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 EPON-4.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-epon4.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma 114 EPON-4.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'harmanly-EPON-5.129	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 EPON-4.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia EPON-4.210	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-epon-5.26	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.26
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Varna-Asparuhovo-8.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik-EPON-4.214	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.214
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik-EPON-4.215	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Panagurishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv ix1-9.253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv EPON-5.159	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.159
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razdelna-EPON-5.167	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Parvomay IX0-9.252	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Parvomay IX1-9.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Parvomai-r143-mxge-0.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.87
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Asparuhovo-EPON-5.13	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.13
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Asparuhovo-EPON-5.62	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Asparuhovo-EPON-5.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Asparuhovo-EPON-5.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Peshtera EPON-5.23	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.23
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 EPON-4.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 EPON-4.227	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv ix1-9.250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv ix1-9.249	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv ix1-9.248	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv EPON Sever1-5.94	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo-ix1-9.247	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.247
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Yujen-1-5.93	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.93
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 ix1-32.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hipodruma114-IX1-32.49	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.49
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Samuilovo em1-9.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kotel-em0-9.245	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kotel-em1-9.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'reduta-em1-32.44	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.44
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kotel-EPON-5.199	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.199
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Samuilovo EPON-5.50	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.50
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Grozdevo-EPON-4.251	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.251
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-5.33	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.33
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Plovdiv-em1-16.40 PLOVDIV	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.40
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Plovdiv-em1-16.31 VOISIL	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.31
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Voisil-EPON-5.157	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.157
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-pz-1-21	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala-ix0-9.243	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.243
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Byala-ix1-9.242	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Biser-EPON-4.223	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 EPON-4.239	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'reduta-EPON-4.240	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Arista Lulin 145 ix1-32.101	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lulin 715 em0-32.109	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.109
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pz-1-22	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pz-1-23	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Zit-Mladost-1.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'pazardjik-ix1-9.241	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.241
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dylboki EPON-6.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sadovo EPON-4.249	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.249
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Septemvri ix0-9.239	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.239
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'septemvri 10G-0.59	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.59
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Septemvri ix1-9.238	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Power Supply Hipodruma-114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.227
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Zapad-1 5.91	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.91
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sarnica em0-8.78	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'epon-asenovgrad-5.143	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.143
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bolyarci-mxge-rtr163-0.67	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.67
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bolyarci-ix1-8.69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Aksakovo EPON-4.76	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Trud-ix1-9.237	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kostievo-ix1-9.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dobrich-mxge2-rtr230-10.0.1.214	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.214
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stozher-EPON-5.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Pech	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-5.100	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.100
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ignatievo EPON-4.250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma 114 EPON-5.84	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad EPON-5.76	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernogorovo-EPON-4.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mladost 443 EPON-4.109	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.109
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik-EPON-4.228	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo EPON-4.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ivailovgrad-EPON-5.127	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.127
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-Rakovski	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Netspot	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'sungurlare-EPON-5.36	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.36
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shivachevo-EPON-5.49	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.49
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 IX1-32.76	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.76
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Varna H.Dimitar ix1-9.235	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.235
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-5.146	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad EPON-5.166	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'H.Dimitar-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala-EPON-4.254	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hisarya-EPON-4.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-south	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byal Izvor  EPON-5.108	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.108
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Mineralni Bani2-EPON-4.186	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.186
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven Epon-4.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Suvorovo EPON-4.253	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.253
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Benkovski-EPON-5.103	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik - EPON-5.164	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.164
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik - EPON-4.206 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik - EPON-4.207	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'STZ(mineralni bani) ix0-9.232	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.232
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'STZ(mineralni bani) ix1-9.231	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.231
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'straldja ix0-9.234	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'straldja ix1-9.233	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'straldja mxge-1.252	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lubimec-ix1-9.230	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Harmanly mxge-1.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Lubimec-Epon-5.48	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.48
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yagoda-EPON-4.183	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.183
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pz-2-4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.123
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pz-2-5	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Targovishte-em0-9.229	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.229
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Targovishte-em1-9.228	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.228
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Targovishte-EPON-4.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kazanlak-arista-ix1-9.226	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'S.lozen	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.245
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krun-EPON-5.56	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.56
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Cacti	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cacti 32Vlan	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Backup 32Vlan	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Netspot vlan 32	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cacti	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Backup 116 vlan	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.16.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Cacti	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Netspot	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Backup	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Netspo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.55.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Voluyak em1 113.15	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.113.15
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Voluyak TP-Link 113.16	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.113.16
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hemus-EPON-4.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala EPON-4.149	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.149
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Simeonovgrad ix1-9.225	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.225
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'nadejda-bl.257-32.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'yambol-ix1-9.224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'velingrad-em1-9.223	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.223
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'elhovo-EPON-5.163	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Nezavisimost	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Nezavisimost	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Smolyan-ix1-9.221	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.221
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blagoevgrad-EPON-5.25	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.25
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo-EPON-6.126	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.126
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kazanlak em0-9.220 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.220
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kozanovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.119
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven-Epon-5.184	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven-Epon-5.206	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sliven Arista ix0-8.172	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Smolyan-mxge-rtr157	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.73
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Smolyan-EPON-5.162	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.162
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dimitrovgrad-mxge-rtr233-1.211	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.211
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Shishmanovo EPON-4.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kableshkovo EPON-4.184	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'vladaia-em0-9.219	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.92
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'vladaia-em1-9.218	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.218
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'KrasnoSelo189-gpon-3.112	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.112
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-4.188	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.188
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-4.196	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-4.197	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia-4.1-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia-6.1-EPON	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pavel bania EPON-4.194	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sungurlare EPON-4.180	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dibich EPON-4.164	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.164
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shumen EPON-4.166 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik-EPON-2-7	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Obzor-ix1-8.159	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.159
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Rozovo Epon-4.200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pokrovnik-EPON-5.7	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dolno Belevo-EPON-5.8	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.8
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krichim-em1-8.83	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.83
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krichim-EPON-4.192	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.192
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Enina-EPON-4.224	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.224
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad-EPON-4.147	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.147
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik Epon-4.168	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.168
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kichevo-EPON-5.169 няма управление	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.169
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'sungurlare-10G-0.37	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.37
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'sungurlare-ix0-9.217 bez UPS	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.217
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'sungurlare-ix1-9.216	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.216
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blagoevgrad-arista-ix0-9.215	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.215
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Bolyarovo EPON-4.195	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.195
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'epon-Crancha	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'epon-Chirpan	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.163
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Krun-ix1-9.213	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.213
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-6.1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.160
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'EPON-6.2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.165
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-arista-ix0-9.211	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.211
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'yambol-em0-9.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Yambol-mxge2-rtr235-10.0.1.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'provadia-EPON-4.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 EPON-4.233	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.233
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Samuilovo-EPON-4.174	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.174
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sredec ix0-9.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sredec ix1-9.207	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Sliven Arista ix1-9.210	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.210
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pazardvik Arista ix1-9.209	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.209
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Peshtera-EPON-4.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kaloianovec-EPON-4.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sredec EPON-6.94	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.94
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lulin Dude	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.101.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Aksakovo ix1-9.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tervel ix0-9.204	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.204
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tervel ix1-9.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tervel ix1-9.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Tervel-mxge-rtr236-10.0.1.208	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.208
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Yagoda-ix1-9.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'AlekoKonstantinovo-ix1-9.200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Glavinica-ix1-9.199	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.199
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ivailo-ix1-9.198 - NO UPS	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Priselci-ix1-9.197	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.197
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Razlog-ix0-9.196	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.196
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kableshkovo-ix1-9.195	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.195
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Yambol-EPON-4.199	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.199
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Burgas-mxge-rtr237-10.0.1.207	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.207
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ardino ix0-9.194	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.194
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ardino ix1-9.193	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Aksakovo EPON-4.146	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.146
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Zdravetc-PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'razgrad-EPON-4.157	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.157
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'razlog-ix1-9.191	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.191
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'EPON-Panagurishte	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-Kostievo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Blagoevgrad-mxge-rtr238-10.0.1.206	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.206
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'sadovo-EPON-4.161	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.161
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'V.Tarnovo-EPON-6.8	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.8
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yambol-EPON-5.124	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.124
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Razlog-em1-9.188	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.188
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'provadia-EPON-4.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernogorovo-ix1-9.187 NO UPS	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.187
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Krasno selo 189 ix1-32.237	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.237
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Ardino-EPON-4.155	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.155
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Radinovo-EPON-4.178	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala-EPON-4.117	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.117
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kardzali-mxge-rtr239-10.0.1.205	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.205
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Kardzali-ix1-9.185	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.185
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'blagoevgrad EPON-4.129	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.129
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kocherinovo-em1-8.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.87
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Padesh-EPON-4.126	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.126
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'simeonovgrad-EPON-4.198	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.198
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'MINSTROY-BOJURISHTE-PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.71
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hipodruma114-EPON-4.158	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.158
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia EPON-4.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia EPON-4.171	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia-ix1-8.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Smolyan-EPON-4.142	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.142
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'AlekoKonstantinovo-EPON-4.181	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.181
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shabla	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dinkata-EPON-5.19	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.19
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topolovgrad EPON-5.2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.2
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kocherinovo-EPON-5.3	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.3
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'KrasnoSelo189-gpon-3.104	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.104
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Galabovo-EPON-5.1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.1
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Divdiadovo-EPON-4.144	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.144
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bankia EPON-4.141	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.141
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo-EPON-4.179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'OvchaKupel-bl507-mxge-rtr241-1.203	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.203
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Peshtera-EPON-4.116	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.116
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Shumen EPON-4.151	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.151
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GrafIgnatievo-EPON-6.240	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lesichevo-EPON-4.130	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.130
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'geo-milev-bl255-gpon-3.96	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.96
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Iztok r.a.28 gpon-3.128	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.128
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Iztok r.a.28 gpon-3.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bunkera-EPON-4.131	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.131
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bunkera-EPON-4.211	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.211
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'razgrad-EPON-4.143	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.143
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'ns2.bulsat.com	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'ns1.bulsat.com	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Straldja-EPON-4.113	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.113
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dude-Sofia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dude-Sofia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.0.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dude-Sofia	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.0.32
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 EPON-.4.118	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.118
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hipodruma114-EPON-4.125	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.125
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lubimec-EPON-4.193	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.193
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lagera 52 EPON-4.106	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.106
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'speedtest-srv-1.33	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 46.40.73.34
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'epon-PECH-4.120	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.120
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Bolyarci-EPON-4.112	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.112
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala-EPON-4.111	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.111
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'geo-milev-bl255-gpon-2.252	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.252
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'lulin-bl.145-gpon-2.254	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.254
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vrajdebna-EPON-4.172	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.172
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vrajdebna-EPON-4.102	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.102
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kozloduy-EPON-4.103	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kozloduy-EPON-4.104	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.104
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'epon-pz-2-8	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.100
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'shumen EPON-4.114	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.114
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vrajdebna-ul.59-32.52	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.52
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Radilovo-EPON-4.101	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.101
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'gsm-gw	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.98.7
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'MalkoAsenovo-EPON-4.132	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.132
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'kozloduy-EPON-4.99	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.99
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kozloduy EPON-4.82	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.82
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ardino-EPON-5.4	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pleven-mxge-r242-1.202	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.202
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Intesa Kukush 1	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 188.254.255.58
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pleven-EPON-6.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pleven-EPON-4.68	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.68
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kotel-EPON-4.69	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.69
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Elhovo-EPON-4.97	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.97
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Izbegli-EPON-4.122	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.122
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dasan2-Nadejda-2.248	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.248
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'yambol-EPON-6.39	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.39
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Sborishte-EPON-4.121	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.121
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'epon-Cerovo	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.110
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Hisarya-ix0-9.184	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.184
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hisarya-ix1-9.183	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.183
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Hisarya-10G-1.201	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.201
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Obzor-EPON-4.127	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.127
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'zaichar-gpon-2.244	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.244
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'radnevo-EPON-4.154	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.154
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Priselci-EPON-4.140	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.140
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Lulin bl.464-POLICIA-104.20	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.104.20
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'epon-s.Krum	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.79
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Ardino-mxge-1.200	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.1.200
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Stamboliyski EPON-.4.86	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.86
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Topoli-ix1-9.182	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.182
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Nadejda-gpon-2.230	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.230
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Byala-EPON-4.148	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.148
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'fondovi-bl.204-gpon-2.250	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.250
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'trud-EPON-6.246	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.6.246
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'New-Dasan-GPON Drujba 92	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.240
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'MaloKonare-EPON-4.95	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.95
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'TEST-SW	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.104
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Darvenica-bl.9-gpon-2.242	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.242
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kocherinovo-Rila-EPON-4.60	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.60
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Pazardjik - EPON-4.87	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.87
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Chernokonevo-Epon-10.7.4.77	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.77
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'radnevo-EPON-4.78	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.78
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'elhovo-EPON-4.88	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.88
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Kotel-EPON-4.61	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.61
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Parvomay EPON-4.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'shumen EPON-4.137	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.137
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'STZ Arista 100g IX0-8.56	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.56
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GrafIgnatievo-EPON-4.62	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.62
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'pazardjik-arista100G-ix0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.181
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'GPON Lulin 815  -  2.234 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.234
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'GPON Lulin 815  -  2.236	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.236
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Varna-arista10G-ix0-9.179	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.179
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Epon-Kran-4.138	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.138
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Yagodovo-IX1-9.178	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.178
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Dibich-IX1-9.177	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.177
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gabrovo EPON-4.136	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.136
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'plovdiv-arista100G-ix0	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.180
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'panagurishte-em0-9.176	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.176
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Epon-4.83	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.83
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-4.84	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.84
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Epon-4.85	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.4.85
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Dobrich-Arista100G-9.175	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.175
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Arista100G-9.173-rezerva	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.173
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Velingrad ix0-9.171	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.171
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Velingrad em0-9.170	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.170
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Iztok r.a.28 gpon-2.238	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.2.238
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Power Supply Vrajdebna	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.88.226
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Aksakovo-Epon-5.63	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.5.63
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'blagoevgrad-arista-ix1-9.167	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.167
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Smolyan-ix0-9.166	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.9.166
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Gurmazovo-PWN	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.73
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'gabrovo-ix0-8.70	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.8.70
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Pazardjik gpon-3.212	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.3.212
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Alabin Power Supply 2	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.56.5
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Alabin Power Supply 1 	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.56.4
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vivacom-Monitor-10.0.7.103 - vlan-5 GLOBAL 10.0.0.0/21 Router/Server   - 10.0.7.100-109/21	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.7.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vivacom-Monitor-10.0.15.103 - vlan-5 GLOBAL 10.0.8.0/21 Switch - 10.0.15.100-109/21	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.15.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vivacom-Monitor-10.7.7.103 - vlan-7 EPON/GPON 10.7.0.0/21  -  10.7.7.100-109/21	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.7.7.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "p0nsnmps3cr3t"


- job_name: 'Vivacom-Monitor-10.0.32.81 - vlan-132 Sofia 10.0.32.0/24 - 10.0.32.33-35/24 + 10.0.32.81 + 10.0.32.173	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 10.0.32.81
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"


- job_name: 'Vivacom-Monitor-192.168.1.103 - vlan-50 SofiaOnline 192.168.1.0/24 - 192.168.1.100-109/24	'
  scrape_interval: 5s
  static_configs:
    - targets: 
      - 192.168.1.103
  metrics_path: /snmp
  params:
    module: [if_mib]
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: 10.104.232.153:9116
  snmp_exporter:
    community: "cucuce3b3"

kind: Secret
metadata:
  creationTimestamp: null
  name: additional-scrape-configs
